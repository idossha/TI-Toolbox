#!/bin/bash

###########################################
# TI-Toolbox MOVEA Optimization CLI
# MOVEA: Multi-Objective optimization via Evolutionary Algorithm
# For TI electrode montage optimization
###########################################

set -e  # Exit immediately if a command exits with a non-zero status

# Base directories
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
movea_dir="$script_dir/../MOVEA"

# Define color variables
BOLD='\033[1m'
RESET='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
BOLD_CYAN='\033[1;36m'
YELLOW='\033[0;33m'

# Default values
GENERATIONS=50
POPULATION=30
CURRENT=2.0
ROI_RADIUS=10
TARGET_TYPE="preset"

# Function to display usage
usage() {
    echo -e "${BOLD_CYAN}TI-Toolbox MOVEA Optimization${RESET}"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Required:"
    echo "  -s, --subject DIR          Subject directory (m2m folder)"
    echo "  -t, --target TARGET        Target (preset name or 'X,Y,Z' coordinates)"
    echo ""
    echo "Optional:"
    echo "  -l, --leadfield FILE       Leadfield .npy file (will generate if missing)"
    echo "  -p, --positions FILE       Positions .npy file"
    echo "  -o, --output DIR           Output directory (default: subject/MOVEA)"
    echo "  -g, --generations N        Number of generations (default: 50)"
    echo "  -n, --population N         Population size (default: 30)"
    echo "  -c, --current FLOAT        Current in mA (default: 2.0)"
    echo "  -r, --radius MM            ROI radius in mm (default: 10)"
    echo "  -e, --electrodes N         Number of electrodes (default: 75)"
    echo "  -h, --help                 Show this help message"
    echo ""
    echo "Preset Targets:"
    echo "  motor, dlpfc, hippocampus, v1, thalamus, pallidum, sensory, dorsal"
    echo ""
    echo "Example:"
    echo "  $0 -s /path/to/m2m_subject -t motor -g 100 -n 50"
    echo "  $0 -s /path/to/m2m_subject -t '47,-13,52' -g 50"
    echo ""
    exit 0
}

# Parse command line arguments
SUBJECT_DIR=""
TARGET=""
LEADFIELD_FILE=""
POSITIONS_FILE=""
OUTPUT_DIR=""
NUM_ELECTRODES=75

while [[ $# -gt 0 ]]; do
    case $1 in
        -s|--subject)
            SUBJECT_DIR="$2"
            shift 2
            ;;
        -t|--target)
            TARGET="$2"
            shift 2
            ;;
        -l|--leadfield)
            LEADFIELD_FILE="$2"
            shift 2
            ;;
        -p|--positions)
            POSITIONS_FILE="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -g|--generations)
            GENERATIONS="$2"
            shift 2
            ;;
        -n|--population)
            POPULATION="$2"
            shift 2
            ;;
        -c|--current)
            CURRENT="$2"
            shift 2
            ;;
        -r|--radius)
            ROI_RADIUS="$2"
            shift 2
            ;;
        -e|--electrodes)
            NUM_ELECTRODES="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo -e "${RED}Unknown option: $1${RESET}"
            usage
            ;;
    esac
done

# Validate required arguments
if [ -z "$SUBJECT_DIR" ]; then
    echo -e "${RED}Error: Subject directory is required${RESET}"
    usage
fi

if [ -z "$TARGET" ]; then
    echo -e "${RED}Error: Target is required${RESET}"
    usage
fi

if [ ! -d "$SUBJECT_DIR" ]; then
    echo -e "${RED}Error: Subject directory not found: $SUBJECT_DIR${RESET}"
    exit 1
fi

# Set output directory
if [ -z "$OUTPUT_DIR" ]; then
    OUTPUT_DIR="$SUBJECT_DIR/MOVEA"
fi

mkdir -p "$OUTPUT_DIR"

# Print configuration
echo -e "${BOLD_CYAN}======================================"
echo -e "MOVEA TI Optimization"
echo -e "======================================${RESET}"
echo -e "${CYAN}Subject:${RESET}      $SUBJECT_DIR"
echo -e "${CYAN}Target:${RESET}       $TARGET"
echo -e "${CYAN}Generations:${RESET}  $GENERATIONS"
echo -e "${CYAN}Population:${RESET}   $POPULATION"
echo -e "${CYAN}Current:${RESET}      $CURRENT mA"
echo -e "${CYAN}ROI Radius:${RESET}   $ROI_RADIUS mm"
echo -e "${CYAN}Electrodes:${RESET}   $NUM_ELECTRODES"
echo -e "${CYAN}Output:${RESET}       $OUTPUT_DIR"
echo -e "${BOLD_CYAN}======================================${RESET}"
echo ""

# Create Python script to run optimization
PYTHON_SCRIPT="$OUTPUT_DIR/_movea_run.py"

cat > "$PYTHON_SCRIPT" << 'EOFPYTHON'
#!/usr/bin/env python3
"""
MOVEA Optimization Runner
Generated by CLI script
"""

import sys
import os
import numpy as np
from pathlib import Path

# Add MOVEA to path
movea_dir = Path(__file__).parent.parent.parent / 'MOVEA'
sys.path.insert(0, str(movea_dir))

from MOVEA import TIOptimizer, LeadfieldGenerator, MontageFormatter

def main():
    # Get parameters from environment
    subject_dir = os.environ['SUBJECT_DIR']
    target = os.environ['TARGET']
    leadfield_file = os.environ.get('LEADFIELD_FILE', '')
    positions_file = os.environ.get('POSITIONS_FILE', '')
    output_dir = os.environ['OUTPUT_DIR']
    generations = int(os.environ['GENERATIONS'])
    population = int(os.environ['POPULATION'])
    current_mA = float(os.environ['CURRENT'])
    roi_radius = int(os.environ['ROI_RADIUS'])
    num_electrodes = int(os.environ['NUM_ELECTRODES'])
    
    print(f"\n{'='*60}")
    print("Loading leadfield matrix...")
    print(f"{'='*60}\n")
    
    # Load or generate leadfield
    if leadfield_file and os.path.exists(leadfield_file):
        print(f"Loading leadfield from: {leadfield_file}")
        lfm = np.load(leadfield_file)
        
        if positions_file and os.path.exists(positions_file):
            positions = np.load(positions_file)
        else:
            # Try to find positions file
            pos_file = leadfield_file.replace('leadfield', 'positions')
            if os.path.exists(pos_file):
                positions = np.load(pos_file)
            else:
                print(f"Error: Positions file not found")
                sys.exit(1)
    else:
        print(f"Generating leadfield from SimNIBS...")
        print(f"This may take several minutes...")
        
        gen = LeadfieldGenerator(subject_dir)
        
        try:
            hdf5_file = gen.generate_leadfield(output_dir=output_dir)
            lfm, positions = gen.load_from_hdf5(hdf5_file)
            
            # Save for future use
            lfm_path, pos_path = gen.save_numpy(output_dir)
            print(f"Leadfield saved to: {lfm_path}")
            print(f"Positions saved to: {pos_path}")
        except Exception as e:
            print(f"Error generating leadfield: {e}")
            print("Please generate leadfield manually or provide existing files")
            sys.exit(1)
    
    print(f"\nLeadfield shape: {lfm.shape}")
    print(f"  Electrodes: {lfm.shape[0]}")
    print(f"  Voxels: {lfm.shape[1]}")
    print(f"  Components: {lfm.shape[2]}")
    
    # Create optimizer
    print(f"\n{'='*60}")
    print("Initializing optimizer...")
    print(f"{'='*60}\n")
    
    optimizer = TIOptimizer(lfm, positions, num_electrodes)
    
    # Parse target
    try:
        # Try parsing as coordinates
        coords = [float(x.strip()) for x in target.split(',')]
        if len(coords) == 3:
            target_parsed = coords
        else:
            target_parsed = target
    except:
        target_parsed = target
    
    print(f"Target: {target_parsed}")
    print(f"ROI radius: {roi_radius} mm")
    
    optimizer.set_target(target_parsed, roi_radius)
    
    # Run optimization
    print(f"\n{'='*60}")
    print(f"Running optimization...")
    print(f"Generations: {generations}, Population: {population}")
    print(f"{'='*60}\n")
    
    result = optimizer.optimize(
        max_generations=generations,
        population_size=population
    )
    
    # Format and save results
    print(f"\n{'='*60}")
    print("Saving results...")
    print(f"{'='*60}\n")
    
    # Load electrode coordinates if available
    electrode_csv = None
    potential_csv_locations = [
        Path(__file__).parent.parent.parent / 'assets' / 'ElectrodeCaps_MNI' / 'GSN-HydroCel-256.csv',
        Path(__file__).parent.parent.parent / 'MOVEA_OG' / 'data' / 'hcp4.csv',
    ]
    
    for csv_path in potential_csv_locations:
        if csv_path.exists():
            electrode_csv = str(csv_path)
            break
    
    formatter = MontageFormatter(electrode_csv)
    montage = formatter.format_ti_montage(result, current_mA)
    
    # Save outputs
    output_csv = os.path.join(output_dir, 'movea_montage.csv')
    output_txt = os.path.join(output_dir, 'movea_montage.txt')
    
    formatter.save_montage_csv(montage, output_csv)
    formatter.save_montage_simnibs(montage, output_txt)
    formatter.print_montage(montage)
    
    print(f"\n{'='*60}")
    print(f"Results saved to: {output_dir}")
    print(f"  - {output_csv}")
    print(f"  - {output_txt}")
    print(f"{'='*60}\n")

if __name__ == '__main__':
    main()
EOFPYTHON

# Export variables for Python script
export SUBJECT_DIR
export TARGET
export LEADFIELD_FILE
export POSITIONS_FILE
export OUTPUT_DIR
export GENERATIONS
export POPULATION
export CURRENT
export ROI_RADIUS
export NUM_ELECTRODES

# Run Python script
echo -e "${CYAN}Starting optimization...${RESET}"
python3 "$PYTHON_SCRIPT"

exit_code=$?

# Clean up temporary script
rm -f "$PYTHON_SCRIPT"

if [ $exit_code -eq 0 ]; then
    echo -e "${GREEN}${BOLD}Optimization completed successfully!${RESET}"
else
    echo -e "${RED}${BOLD}Optimization failed with exit code $exit_code${RESET}"
fi

exit $exit_code

